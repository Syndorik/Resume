---
# based on the example at http://coderobot.downley.net/swagger-driven-testing-in-python.html

swagger: '2.0'
info:
  title: Photographer service API
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json

# I'd rather not deal with security right now.
#
# security:
#   # enable OAuth protection for all REST endpoints
#   # (only active if the TOKENINFO_URL environment variable is set)
#   - oauth2: [uid]

paths:
  /Photo/post:
    post:
      operationId: clientphoto_service.post_clientPhotos
      summary : Create a new photo
      consumes:
        - multipart/form-data
      parameters:
        - name: authorpa
          in: formData
          type: string
          description: photo to upload
          required: false
        - name: itags
          in: formData
          type: array
          items:
            type: string
          description: photo to upload
          required: false
        - name: ilocation
          in: formData
          type: string
          description: photo to upload
          required: false
        - name: icomments
          in: formData
          type: string
          description: photo to upload
          required: false
        - name: ititle
          in: formData
          type: string
          description: photo to upload
          required: false
        - name: thephoto
          in: formData
          type: file
          description: photo to upload
          required: false
      responses:
        201:
          description: New Photo created
  /Photo:
    get:
      operationId: clientphoto_service.get_clientPhotos
      summary : Get all photos
      parameters:
        - name: offset
          in: query
          type: integer
          minimum: 0
          default: 0
          x-example: 0
        - name: limit
          in: query
          type: integer
          minimum: 0
          default: 10
          x-example: 10
      responses:
        200:
          description: Returns a list of all photos
          schema:
            type: array
            items:
              type: string

  /Photo/{photographer_id}:
    get:
      # tags: [Photographer]
      operationId: clientphoto_service.get_photographer
      summary: Get the metadata of a single photo from a photographer.
      parameters:
        - $ref: '#/parameters/photographer_id'
      responses:
        200:
          description: Return the requested photos of the photographer.
          schema:
            type: array
            items:
              $ref: "#/definitions/Photoreturn"
        404:
          description: Photographer does not exist.

  /Photo/ph/{image_id}:
    get:
      operationId: clientphoto_service.get_metaimages
      summary: Get metadata of a given photo
      parameters:
        - $ref: '#/parameters/image_id'
      responses:
        200:
          description: Return the requested matadata photos of the photographer.
          schema:
            $ref: '#/definitions/Photoreturn'
        404:
          description: Image does not exist.

  /Photo/image/{image_id}:
    get:
      produces:
        - image/jpeg
      operationId: clientphoto_service.get_imagefromid
      summary: Get a single photo from a photographer.
      parameters:
        - $ref: '#/parameters/image_id'
      responses:
        200:
          description: Return the requested photos of the photographer.
          schema:
            type : file
            format : jpeg
        404:
          description: Photographer does not exist.
    put:
      operationId: clientphoto_service.put_image
      summary: Modifies metadata of a selected photo
      parameters:
        - $ref: '#/parameters/image_id'
        - $ref: '#/parameters/ititle'
        - $ref: '#/parameters/iauthor'
        - $ref: '#/parameters/icomments'
        - $ref: '#/parameters/itags'
        - $ref: '#/parameters/ilocation'
      responses:
        202:
          description: Photo was updated
        404:
          description: Photo does not exist
    delete:
      operationId: clientphoto_service.delete_image
      summary: Remove a photographer.
      parameters:
        - $ref: '#/parameters/image_id'
      responses:
        204:
          description: Photographer was deleted.
        404:
          description: Photographer does not exist.
parameters:
  photographer_id:
    name: photographer_id
    description: Unique idendtifier of the photo.
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9-]+$"
    x-example: 'lolmdr'
  image_id:
    name: image_id
    description: Unique idendtifier of the photo.
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9-]+$"
    x-example: 'lolmdr'
  authorpa:
    name: authorpa
    type: string
    in: path
    description: The photographer_id of the author...
    x-example: "lolmdr"
    required : true
  iauthor:
    name: iauthor
    type: string
    in: query
    description: The photographer_id of the author...
    x-example: "lolmdr"
    required : true
  itags:
    name: itags
    in: query
    type: array
    description: Tags
    items:
      type: string
    x-example: ["Wallah"]
    minLength: 1
    required: false
  ilocation:
    name: ilocation
    in: query
    type: string
    minLength: 1
    maxLength: 100
    x-example: "Charles"
    required: false
  icomments:
    name: icomments
    in: query
    type: string
    minLength: 1
    maxLength: 255
    x-example: "Berti"
    required: false
  ititle:
    name: ititle
    in: query
    type: string
    minLength: 1
    maxLength: 100
    x-example: "Le Charles Berti"
    required: false

definitions:
  Photoreturn:
    type: object
    properties:
      author:
        type: string
        description: The photograph ID.
      tags:
        type: array
        items:
          type: string
        description: List of tags
      location:
        type: string
        description: Location of the phot.
      comments:
        type: string
        description: The coment on the photo.
      title:
        type: string
        description: The title of the photo.
